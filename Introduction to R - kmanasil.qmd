---
title: "intro-R-Python-exercise1-kmanasil"
author: "Kristi Manasil github:kmanasil"
format: html
editor: visual
---git config --global user.email "you@example.com"
---

## **Universal things every R user should know**

```{r}
# find what version of R using
R.version
```

## **Packages**

```{r}
install.packages("DMwR2")
```

```{r}
help(package="DMwR2")
library(DMwR2)
```

```{r}
# load data
data(algae)
#check load
algae
```

```{r}
# find rows with too many na
manyNAs(algae)
```

```{r}
# list of packages installed
library()
# or current session
(.packages())
```

```{r}
install.packages("dbplyr") # assuming you have dbplyr installed before 

# now you try to check out dplyr, but typed dbplyr by accident
library(dbplyr) 
(.packages())
# you realized the mistake, and you don't want this package to be live in this session due to potential conflicts
# you can detach the package
detach("package:dbplyr", unload=TRUE) 
(.packages())
    
library(dplyr)#load wanted library
```

```{r}
# Another way to see what packages have been installed in your computer
installed.packages() 
```

```{r}
# Find out if your installed packages have a newer version on CRAN
old.packages()
```

Update all your installed packages to the newest version

\# update.packages() I am not going to actually run this due to time

```         
```

```{r}
# Find out the namespace/package a function belongs in your installed packages, just type the function name - e.g., function mean is in base R
mean
```

```{r}
help(mean)
```

```{r}
RSiteSearch('neural networks')

#useful controls in R Studio#
#Ctrl+1  Move focus to the Source Editor.
#Ctrl+2  Move focus to the Console.
#Ctrl+l  Clear the Console.
#Esc     Interrupt R.
```

## **Project and Session Management/Save all objects**

I understood the material for these but I am not running them just including them as comments

save(my.function, mydataset, file="path_to_mysession.RData")

load("path_to_mysession.RData")

save.image()

get and set working directory

## **R Objects and Variables**

```{r}
# R Objects and Variables

vat <- 0.2
vat
```

```{r}
(vat <- 0.2)
```

```{r}
x <- 5
y <- vat*x
y
```

```{r}
z <- (y/2)^2
y
```

```{r}
z
```

```{r}
ls()
```

```{r}
objects()
```

```{r}
# remove variable
rm(vat)
```

## **R Functions**

```{r}
max(4, 5, 6, 12, -4)
```

```{r}
mean(4, 5, 6, 12, -4)
```

```{r}
max(sample(1:100, 30))
```

```{r}
mean(sample(1:100, 30))
```

```{r}
set.seed(1) #the seed determines the starting point used in generating a sequence of pseudo random numbers #set.seed() has global scope, meaning it affects all random number generators used/called in your program.
#there is a function to remove the seed:rm(.Random.seed, envir=.GlobalEnv)

rnorm(1) #give me one number from a normal distribution
```

```{r}
rnorm(1)
```

```{r}
set.seed(2)
rnorm(1)
```

```{r}
rnorm(1)
```

```{r}
exists("se")
```

```{r}
se <- function(x){
  variance <- var(x)
  n <-length(x)
  return (sqrt(variance/n))
}

exists("se")
```

```{r}
convMeters <- function (x, to="inch"){
  factor = switch(to, inch=39.3701, foot=3.28084, yard=1.09361, mile=0.000621371, NA)
  if(is.na(factor)) stop ("unknown target unit")
  else return (x*factor)
}
convMeters(23, "foot")
```

```{r}
convMeters(40)
```

```{r}
convMeters(56.2, "yard")
```

```{r}
convMeters(to="yard", 56.2)
```

## **Factors**

```{r}
g <-c('f', 'm', 'f', 'f', 'f', 'm', 'm', 'f')
g <- factor(g)

other.g <-factor(c('m', 'm', 'm', 'm'), levels= c('f', 'm'))
other.g
```

```{r}
other.g <-factor(c('m', 'm', 'm', 'm'))
other.g
```

```{r}
g <- factor(c('f', 'm', 'f', 'f', 'f', 'm', 'm', 'f'))
table(g)
```

```{r}
a <- factor(c('adult', 'juvenile','adult', 'juvenile','adult', 'juvenile','juvenile', 'juvenile'))
table(a, g)
```

```{r}
a <- factor(c('adult', 'juvenile','adult', 'juvenile','adult', 'juvenile','juvenile', 'juvenile'))
t <- table(a, g)
t
```

```{r}
margin.table(t, 1)#1 refers to the first factor, a (age)
```

```{r}
margin.table(t, 2)# now find the marginal freq of the second factor g
```

```{r}
t
```

```{r}
prop.table(t, 1) #use the margin generated for the 1st factor a 
```

```{r}
prop.table(t, 2)
```

```{r}
prop.table(t) #overall
```

```{r}
prop.table(t) * 100
```

## **R data structures**

Vectors

```{r}
# create a vector
v <- c(2, 5, 3, 4)
length(v)
```

```{r}
# data type  of v
mode(v)
```

```{r}
# mix str and nums
v <- c(2, 5, 3, 4, 'me')
mode(v)
```

```{r}
v
```

```{r}
# missing val in vector
v <- c(2, 5, 3, 4, NA)
mode(v)
```

```{r}
v
```

```{r}
# boolean in vector
b <- c(TRUE, FALSE, NA, TRUE)
mode(b)
```

```{r}
b
```

```{r}
b[3]
```

```{r}
# update by index
b[3] <- TRUE
b
```

```{r}
# add to index at any position
b[10] <- FALSE
b
```

```{r}
# create an empty vector
e <-vector()
mode(e)
```

```{r}
e <- c()
mode(e)
```

```{r}
length(e)
```

```{r}
# use elements to construct another
b2 <-c(b[1], b[3], b[5])
b2
```

```{r}
# find sq root of elements in vector
sqrt(v)
```

### **Vector arithmetic**

```{r}
v1 <- c(3, 6, 9)
v2 <- c(1, 4, 8)
v1+v2 #addition
```

```{r}
v1*v2 #dot product
```

```{r}
v1-v2 #subtraction
```

```{r}
v1/v2 #divsion
```

```{r}
v3 <- c(1, 4)
v1+v3#the recycling rule makes v3 [1, 4, 1]
```

```{r}
2*v1
```

### **Vector summary**

```{r}
mysum <- function (x){
  sum <- 0
  for(i in 1:length(x)){
    sum <- sum + x[i]
  }
  return (sum)
}

(mysum (c(1, 2, 3)))
```

# **PART II**

## **Easy ways to generate vectors**

```{r}
(x <-1:10)
```

```{r}
(x <-10:1)
```

```{r}
10:15-1
```

```{r}
10:(15-1)
```

```{r}
(seq(from=1, to=5, length=4)) # 4 values between 1 and 5 inclusive, even intervals/steps
```

```{r}
(seq(length=10, from=-2, by=0.5)) #10 values, starting from 2, interval/step = 0.5
```

```{r}
(rep(5, 10))
```

```{r}
(rep("hi", 3))
```

```{r}
(rep(1:2, 3))
```

```{r}
(rep(TRUE:FALSE, 3))
```

```{r}
(rep(1:2, each=3))
```

```{r}
gl(3, 5) #three levels, each repeat 5 times
```

```{r}
gl(2, 5, labels= c('female', 'male'))#two levels, each level repeat 5 times
```

```{r}
#first argument 2 says two levels. 
#second argument 1 says repeat once
#third argment 20 says generate 20 values
gl(2, 1, 20, labels=c('female', 'male'))#10 alternating female and male pairs, a total of 20 values.
```

```{r}
n <- rep(1:2, each=3)
(n <- factor(n, 
             levels = c(1, 2),
             labels = c('female','male')
             ))
```

```{r}
(rnorm(10, mean=10, sd=3))
```

```{r}
(rt(10, df=5)) #10 values following a Student T distribution with degree of freedom of 5
```

**Exercise**:

\(1\) Generate a random sample of `normally distributed` data of `size 100`, with a `mean of 20` and `standard deviation 4`

\(2\) Compute the standard error of means of the dataset.

```{r}
sample <- rnorm(100, mean=20, sd=4)
se(sample)
```

## **Sub-setting**

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
#select all elements that is greater than 0
(gtzero <- x[x>0])
```

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
(x[x<=-2 | x>5])        
```

```{r}
(x[x>40 & x<100])
```

```{r}
x <- c(0, -3, 4, -1, 45, 90, -5)
(x[c(4, 6)])#select the 4th and 6th elements in the vector
```

```{r}
(y<-c(4,6)) #same as above
```

```{r}
(x[y])
```

```{r}
(x[1:3]) #select the 1st to the 3rd elements in the vector
```

```{r}
# Use negative index to exclude elements
x <- c(0, -3, 4, -1, 45, 90, -5)
(x[-1]) #select all but the first element
```

```{r}
(x[-c(4, 6)])
```

```{r}
(x[-(1:3)])
```

### **Named elements**

```{r}
# Assign names to vector elements
x <- c(0, -3, 4, -1, 45, 90, -5)
names(x) <- c('s1', 's2', 's3', 's4', 's5', 's6', 's7')
x
```

```{r}
(pH <- c(area1=4.5, area2=5.7, area3=9.8, mud=7.2))
```

```{r}
pH['mud']
```

```{r}
pH[c('area1', 'mud')]
```

Commenting out the following 4 that show us errors so the qmd will render

```{r}
# but can not exclude by name
# x[-s1] #results in error
```

```{r}
# x[-"s1"] #results in error
```

```{r}
# x[s1:s7] #results in error
```

```{r}
# x[c('s1':'s7')] #results in error
```

```{r}
# empty index selects all
pH[]
```

```{r}
pH
```

```{r}
# reset values in vector to 0
pH[] <- 0
pH
```

```{r}
pH<- 0
pH
```

This is different fromÂ `pH <- 0`, why?

The first method zero the values because the empty \[\] selected all indices from the vector and changed their values to zero. The second assignment without the brackets is assigning the value of zero to pH and is now basically a variable and not a vector.

## **More R Data Structures**

### **Matrices and Arrays**

```{r}
# create vector and show not matrix or array
m <- c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23)
is.vector(m)
```

```{r}
is.matrix(m)
```

```{r}
is.array(m)
```

```{r}
# organize vector into matrix
dim(m) <-c(2, 5)#make the vector a 2 by 5 matrix, 2x5 must = lenght of the vector
m
```

```{r}
is.vector(m)
```

```{r}
is.matrix(m)
```

```{r}
is.array(m)
```

```{r}
# switch the build to rows rather columns
(m <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23), 2, 5, byrow = TRUE))
```

**Exercise:**

Create a matrix with two columns:

First columns hold age data for a group of students `11, 11, 12, 13, 14, 9, 8`, and second columns hold grades `5, 5, 6, 7, 8, 4, 3`.

```{r}
test <-matrix(c(11, 11, 12, 13, 14, 9, 8, 5, 5, 6, 7, 8, 4, 3), 7, 2)
test
```

```{r}
# access matrix elements by index
m <- c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23)
#then 'organize' the vector as a matrix
dim(m) <- c(2, 5)#make the vector a 2 by 5 matrix, 2x5 must = lenght of the vector
m
```

```{r}
m[2, 3]#the element at row 2 and column 3
```

```{r}
# sub-setting matrix 
(s<- m[2, 1]) # select one value
(m<- m [c(1,2), -c(3, 5)]) #select 1st row and 1st, 2nd, and 4th columns: result is a vector
```

```{r}
(m [1, ]) #select complete row or column: 1st row, result is a vector
```

```{r}
(v<-m [, 1]) # 1st column, result is a vector
```

```{r}
is.vector(m)
is.matrix(m)
is.vector(s)
is.vector(v)
is.matrix(v)
```

```{r}
# use drop to keep as matrix
m <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23), 2, 5)
(m<-m [, 2, drop = FALSE])
```

```{r}
is.matrix(m)
is.vector(m)
```

```{r}
# use cbind to join 2 or more vects or mat by column
cbind (c(1,2,3), c(4, 5, 6))
```

```{r}
# or by row
rbind (c(1,2,3), c(4, 5, 6))
```

```{r}
m <- matrix(c(45, 23, 66, 77, 33, 44, 56, 12, 78, 23), 2, 5)
(a <- rbind (c(1,2,3,4,5), m))
```

```{r}
is.array(a)
is.matrix(a)
```

**Exercise**:

What will `m1-m4` look like?

```{r}
m1 <- matrix(rep(10, 9), 3, 3) 
m1
```

```{r}
m2 <- cbind (c(1,2,3), c(4, 5, 6))
m2
```

```{r}
m3 <- cbind (m1[,1], m2[2,])
m3
```

```{r}
m4 <- cbind (m1[,1], m2[,2])
m4
```

```{r}
# name rows and columns
sales <- matrix(c(10, 30, 40, 50, 43, 56, 21, 30), 2, 4, byrow=TRUE)
colnames(sales) <- c('1qrt', '2qrt', '3qrt', '4qrt')
rownames(sales) <- c('store1', 'store2')
sales
```

**Exercise**:

Find `store1` `1qrt` sale. 2. List `store2`'s 1st and 4th quarter sales:

```{r}
sales['store1', '1qrt']
```

```{r}
sales['store2', c('1qrt', '4qrt')]
```

#### Arrays

```{r}
# 3-D array
a <- array(1:48, dim= c(4, 3, 2))
a
```

```{r}
a [1, 3, 2]
a [1, , 2]
a [1, , 2, drop=FALSE]
a [4, 3, ]
a [c(2, 3), , -2]
```

```{r}
# define dimensions
dimnames(a)[[1]] <-c("1qrt", "2qrt", "3qrt", "4qrt")
dimnames(a)[[2]] <-c("store1", "store2", "store3")
dimnames(a)[[3]] <-c("2017", "2018")
a
```

```{r}
ar <- array(data     = 1:27,
            dim      = c(3, 3, 3),
            dimnames = list(c("a", "b", "c"),                                           c("d", "e", "f"),                                           c("g", "h", "i")))
ar
```

```{r}
# split into matirces
matrix1 <- ar[,,g]
```

```{r}
matrix1 <- ar[,,'g']
matrix1
```

```{r}
matrix2 <- ar[,,'h']
matrix2
```

```{r}
# add them together
sum <-matrix1 + matrix2
sum
```

```{r}
# or multiply
matrix1*3
```

```{r}
matrix1*c(2, 3)
```

```{r}
matrix1*c(2,3,2,3,2,3,2,3,2)
```

```{r}
matrix1*c(1, 2, 3)
```

```{r}
matrix1/c(1, 2, 3)
```

```{r}
matrix1/c(1, 2, 3, 1, 2, 3, 1, 2, 3)
```

### **Lists**

```{r}
mylist <- list(stud.id=34453,
               stud.name="John",
               stud.marks= c(13, 3, 12, 15, 19)
               )

mylist$stud.id
```

```{r}
mylist[1]
```

```{r}
mylist[[1]]
```

```{r}
mylist["stud.id"]
```

```{r}
handle <- "stud.id"
mylist[handle]
```

```{r}
mylist[["stud.id"]]
```

```{r}
mylist <- list(stud.id=34453,
               stud.name="John",
               stud.marks= c(13, 3, 12, 15, 19)
               )
mylist$stud.marks
```

```{r}
mylist$stud.marks[2]
```

```{r}
names(mylist)
```

```{r}
# change names
names(mylist) <- c('id','name','marks')

names(mylist)
```

```{r}
mylist
```

```{r}
# add new
mylist$parents.names <- c('Ana', "Mike")
mylist
```

```{r}
# concatenate two list
newlist <- list(age=19, sex="male");
expandedlist <-c(mylist, newlist)
expandedlist
```

```{r}
length(expandedlist)
```

### **Remove list components using negative index, or using NULL**

```{r}
expandedlist <- expandedlist[-5]
expandedlist <- expandedlist[c(-1,-5)]
expandedlist$parents.names <- NULL
expandedlist[['marks']] <- NULL
```

```{r}
#the above statements remove the 5th index(age)and then remove the first and fifth indicies (id, sex) and adds null values to the parent's names and finally replaces marks with null values. The result leaves only the name in the list
expandedlist
```

```{r}
mylist
```

```{r}
unlist(mylist)
```

```{r}
mode(mylist)
```

```{r}
mode(unlist(mylist))
```

```{r}
is.vector(unlist(mylist)) #atomic list with names
```

```{r}
is.list(mylist)
```

```{r}
is.atomic(mylist)
```

```{r}
is.list(unlist(mylist))
```

## **Data Frames**

```{r}
# create a data frame
my.dataframe <- data.frame(site=c('A', 'B', 'A','A', 'B'),
                           season=c('winter', 'summer','summer', 'spring', 'fall'),
                           ph = c(7.4, 6.3, 8.6, 7.2, 8.9))
my.dataframe
```

```{r}
# using names and indicies
my.dataframe[3, 2]
my.dataframe[['site']]
my.dataframe['site']
my.dataframe[my.dataframe$ph>7, ]
my.dataframe[my.dataframe$ph>7, 'site']
my.dataframe[my.dataframe$ph>7, c('site', 'ph')]
```

```{r}
# using a subset to query df
subset(my.dataframe, ph>7)
```

```{r}
subset(my.dataframe, ph>7, c("site", "ph"))
```

```{r}
subset(my.dataframe[1:2,], ph>7, c(site, ph))
```

```{r}
# change values in df
my.dataframe[my.dataframe$season=='summer', 'ph'] <- my.dataframe[my.dataframe$season=='summer', 'ph'] + 1 
                                                                  my.dataframe[my.dataframe$season=='summer', 'ph']
```

```{r}
my.dataframe[my.dataframe$season=='summer' & my.dataframe$ph>8, 'ph'] <- my.dataframe[my.dataframe$season=='summer' & my.dataframe$ph>8, 'ph'] + 1                                                              
        
my.dataframe[my.dataframe$season=='summer', 'ph']                             
```

```{r}
# add a column
my.dataframe$NO3 <- c(234.5, 123.4, 456.7, 567.8, 789.0)
my.dataframe
```

```{r}
# remove column
my.dataframe <- my.dataframe[, -4]
my.dataframe
```

```{r}
# check structure of df
str(my.dataframe)
```

```{r}
nrow(my.dataframe)
```

```{r}
ncol(my.dataframe)
```

```{r}
dim(my.dataframe)
```

```{r}
# Commenting out so this will render
# this does not seem to be supported in RStudio - I need to check on this
# edit(my.dataframe) #this brings up a data editor
# view
# View(my.dataframe) #this brings up a uneditable tab that display the data for you to view.
```

```{r}
# update names
names(my.dataframe) <- c('area', 'season', 'P.h.')
my.dataframe
```

```{r}
# or just update one name/slected names
names(my.dataframe)[3] <- 'ph'
my.dataframe 
```

## **Tibbles**

```{r}
#install and load tibble
#install.packages("tibble")
                                                            library(tibble)
```

```{r}
# create a tibble
my.tibble <- tibble(TempCels = sample(-10:40, size=100, replace=TRUE), 
                    TempFahr = TempCels*9/5+32,
                    Location = rep(letters[1:2], each=50))
my.tibble
```

```{r}
# using peguins
install.packages("palmerpenguins")
library(palmerpenguins)
data(penguins)
dim(penguins)
class(penguins)
penguins
```

```{r}
# coverting df to tibble
pe <-as_tibble(penguins)
class(pe)
pe
```

```{r}
# mode example
x <- 1:16
mode(x)
```

```{r}
# class example
dim(x) <- c(4,4)
class(x) 
```

```{r}
is.numeric(x)
```

```{r}
mode(x) <- "character"
mode(x)
```

```{r}
class(x)
```

mode changed from 'numeric' to 'character', but class stays 'matrix' ... BUT

```{r}
x <- factor(x)
class(x)
```

```{r}
mode(x)
```

class changed from 'matrix' to 'factor', but mode stays 'numeric'

At this stage, even though x has mode numeric again, its new class, 'factor', prohibits it being used in arithmetic operations.

```{r}
is.array(x)
is.list(x)
is.data.frame(x)
is.matrix(x)
is_tibble(x)
is.vector(x)
typeof(x)
```

```{r}
# subsetting a tibble results in smaller tibble
class(pe[1:15, c("bill_length_mm", "bill_depth_mm")])
class(penguins[1:15, c("bill_length_mm", "bill_depth_mm")])
class(pe[1:15, c("bill_length_mm")])
class(penguins[1:15, c("bill_length_mm")])
```

```{r}
# dplyr
# install.packages("dplyr")
library(dplyr)
```

```{r}
select(filter(pe, species=="Adelie"), bill_length_mm, bill_depth_mm)
```

```{r}
filter(select(pe, bill_length_mm, bill_depth_mm, species), species=="Adelie")
```

**Exercise**

How would you achieve the same result as the above but use tibble subsetting?

```{r}
pe
```

```{r}
pe[pe$species=='Adelie', c("bill_length_mm", "bill_depth_mm")]
```

```{r}
subset(pe, pe$species=='Adelie', c("bill_length_mm", "bill_depth_mm"))
```

```{r}
select(pe, bill_length_mm, bill_depth_mm, species) |> filter(species=="Adelie")
```

**Exercise**

Pass the result from the filter to the select function and achieve the same result as shown above.

```{r}
filter(pe, species=="Adelie") |> select(bill_length_mm, bill_depth_mm, species)
```

**Exercise**

Create a data object to hold student names (`Judy`, `Max`, `Dan`) and their grades (\`78`,`85`,`99`) Convert number grades to letter grades:`90-100`:`A`;`80-89`:`B`;`70-79`:`C`; \`\<70`:`F\`

```{r}
students <- list(names=c("Judy", "Max", "Dan"),
                 grades=c(78, 85, 99))
print ("before:")
```

```{r}
students
```

```{r}
gradeConvertor<- function (grade){
  grade = as.numeric(grade)
  if(grade > 100 | grade < 0) print ("grade out of the range")
  else if(grade >= 90 & grade <= 100) return ("A")
  else if(grade >= 80 & grade < 90) return ("B")
  else if(grade >= 70 & grade < 80) return ("C")
  else return ("F")
}

#students$grades <-sapply(students$grades, gradeConvertor)

for(i in 1:length(students$grades)){
  students$grades[i] = gradeConvertor(students$grades[i])
}

print ("after:")
```

```{r}
students
```
